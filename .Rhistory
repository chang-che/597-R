#class(x)
x.logical <- (x ==1)
B <- rep(NA, 64)
for (i in 1:64){
a1 <- as.vector(c(T, x.logical[i,]))
data1 <- dat[,a1]
#cat(class(data1))
#cat(class(data1))
data1 <- as.data.frame(data1)
#colnames(data1)[1] <- 'response'
fit <- glm(y ~ ., data = data1, family = 'binomial')
B[i] <- BIC(fit)
}
for (i in 1:64){
a1 <- as.vector(c(T, x.logical[i,]))
data1 <- dat[,a1]
#cat(class(data1))
#cat(class(data1))
data1 <- as.data.frame(data1)
cat(colnames(data1))
#colnames(data1)[1] <- 'response'
fit <- glm(y ~ ., data = data1, family = 'binomial')
B[i] <- BIC(fit)
}
rm(list = ls())
dat <- read.delim('http://www.ams.sunysb.edu/~pfkuan/Teaching/AMS597/Data/Qn1Data.txt',header=T,sep='\t')
dat <- as.data.frame(dat)
library(FrF2)
PlanA = FrF2(nruns = 64, nfactor = 6)
x = desnum(PlanA)
#class(x)
x.logical <- (x ==1)
B <- rep(NA, 64)
for (i in 1:64){
a1 <- as.vector(c(T, x.logical[i,]))
data1 <- dat[,a1]
#cat(class(data1))
#cat(class(data1))
data1 <- as.data.frame(data1)
#colnames(data1)[1] <- 'response'
fit <- glm(y ~ ., data = data1, family = 'binomial')
B[i] <- BIC(fit)
}
for (i in 1:64){
a1 <- as.vector(c(T, x.logical[i,]))
data1 <- dat[,a1]
#cat(class(data1))
#cat(class(data1))
data1 <- as.data.frame(data1)
cat(colnames(data1))
#colnames(data1)[1] <- 'response'
fit <- glm(y ~ ., data = data1, family = 'binomial')
B[i] <- BIC(fit)
}
a1 <- as.vector(c(T, x.logical[1,]))
data1 <- dat[,a1]
#cat(class(data1))
#cat(class(data1))
data1 <- as.data.frame(data1)
cat(colnames(data1))
#colnames(data1)[1] <- 'response'
fit <- glm(y ~ ., data = data1, family = 'binomial')
B[i] <- BIC(fit)
B
View(dat)
View(data1)
dat <- read.delim('http://www.ams.sunysb.edu/~pfkuan/Teaching/AMS597/Data/Qn1Data.txt',header=T,sep='\t')
dat <- as.data.frame(dat)
library(FrF2)
PlanA = FrF2(nruns = 64, nfactor = 6)
x = desnum(PlanA)
#class(x)
x.logical <- (x ==1)
B <- rep(NA, 64)
for (i in 1:64){
a1 <- as.vector(c(T, x.logical[i,]))
data1 <- dat[,a1]
#cat(class(data1))
#cat(class(data1))
data1 <- as.data.frame(data1)
#colnames(data1)[1] <- 'response'
fit <- glm(y ~ ., data = data1, family = 'binomial')
B[i] <- BIC(fit)
}
sum(!is.na(B))
sum(!is.na(B))
B
x.logical[52,]
sum(!is.na(B))
B
View(data1)
dat <- read.delim('http://www.ams.sunysb.edu/~pfkuan/Teaching/AMS597/Data/Qn1Data.txt',header=T,sep='\t')
dat <- as.data.frame(dat)
library(FrF2)
PlanA = FrF2(nruns = 64, nfactor = 6)
x = desnum(PlanA)
#class(x)
x.logical <- (x ==1)
B <- rep(NA, 64)
for (i in 1:64){
a1 <- as.vector(c(T, x.logical[i,]))
data1 <- dat[,a1,drop = F]
#cat(class(data1))
#cat(class(data1))
#colnames(data1)[1] <- 'response'
fit <- glm(y ~ ., data = data1, family = 'binomial')
B[i] <- BIC(fit)
}
sum(!is.na(B))
ind <- which(B == min(B))
x.logical[ind, ]
as.character(1:10)
as.character(1:10) + c('x)
as.character(1:10) + c('x')
paste0('x',1:10)
?paste
dat <- read.delim('http://www.ams.sunysb.edu/~pfkuan/Teaching/AMS597/Data/Qn1Data.txt',header=T,sep='\t')
dat <- as.data.frame(dat)
library(FrF2)
PlanA = FrF2(nruns = 64, nfactor = 6)
x = desnum(PlanA)
#class(x)
x.logical <- (x ==1)
colnames(x.logical) <- paste0('x',1:6)
B <- rep(NA, 64)
for (i in 1:64){
a1 <- c(T, x.logical[i,])
data1 <- dat[,a1,drop = F]
#cat(class(data1))
#cat(class(data1))
#colnames(data1)[1] <- 'response'
fit <- glm(y ~ ., data = data1, family = 'binomial')
B[i] <- BIC(fit)
}
sum(!is.na(B))
ind <- which(B == min(B))
x.logical[ind, ]
?cat
paste(c(1,2,3))
paste(c(1,2,3), sep = ')
paste(c(1,2,3), sep = '')
paste(c(1,2,3), sep = '', collapse = T)
?paste
paste(c(1,2,3), collapse = T)
paste(c(1,2,3), collapse = '')
paste(c(1,2,3), collapse = ' ')
paste(c(1,2,3), sep = ' ')
paste(c(1,2,3), sep = ' ')
paste(c(1,2,3), sep = '')
paste(c(1,2,3), sep = ' ')
paste(c(1,2,3), sep = ' ')
paste(c(1,2,3), sep = ' ')
paste(c(12,2,3), sep = '')
paste(c(1,2,3), sep = ' ')
paste(c(1,2,3), sep = ' ')
paste(c(1,2,3), sep = ' ')
paste(c(12,2,3), sep = ' ')
paste(c(1,2,3), sep = ' ')
paste(c(1,2,3), sep = ' ')
paste(c(1,2,3), sep = ' ')
paste(c(12,2,3), sep = ' ')
paste(c('a','b','c'), sep = ')
paste(c(1,2,3), sep = ' ')
paste(c(1,2,3), sep = ' ')
paste(c(1,2,3), sep = ' ')
paste(c(12,2,3), sep = ' ')
paste(c('a','b','c'), sep = '')
paste(c(1,2,3), sep = ' ')
paste(c(1,2,3), sep = ' ')
paste(c('a','b','c'), sep = ' ')
paste(c(1,2,3), sep = ' ')
paste(c(12,2,3), sep = ' ')
paste(c('a','b','c'), sep = ' ')
paste(c(1,2,3), sep = ' ')
paste(c(1,2,3), sep = ' ')
?biocLite
source("http://bioconductor.org/biocLite.R")
?biocLite
?install.packages
.libPaths()
paste(c(1,2,3), collapse = ' ')
paste(c(1,2,3), sep = ' ')
paste(c(12,2,3), sep = ' ')
paste(c('a','b','c'), sep = ' ')
paste(c(1,2,3), sep = ' ')
paste(c(1,2,3), sep = ' ')
paste(c(1,2,3), collapse = ' ', sep ='-')
paste(c(1,2,3), sep = ' ')
paste(c(12,2,3), sep = ' ')
paste(c('a','b','c'), sep = ' ')
paste(c(1,2,3), sep = ' ')
paste(c(1,2,3), sep = ' ')
paste(c(1,2,3), collapse = '-')
paste(c(1,2,3), sep = ' ')
paste(c(12,2,3), sep = ' ')
paste(c('a','b','c'), sep = ' ')
paste(c(1,2,3), sep = ' ')
paste(c(1,2,3), sep = ' ')
paste('~', c(1,2,3), collapse = '-', sep = '~')
paste('~', c(1,2,3), collapse = '-')
?paste
```{r}
paste(letters[1:3], c(1,2,3), collapse = '-')
paste(letters[1:3], c(1,2,3), collapse = '-', sep = '=')
paste(letters[1:3], c(1,2,3), collapse = '-')
paste(letters[1:3], c(1,2,3), collapse = '-', sep = '=')
paste(letters[1:3], c(1,2,3), collapse = '-')
paste(letters[1:3], c(1,2,3), collapse = '-', sep = '=')
paste(letters[1], c(1,2,3), collapse = '-', sep = '=')
paste(letters[1:3], c(1,2,3), collapse = '-')
paste(letters[1:3], c(1,2,3), collapse = NULL)
paste(letters[1:3], c(1,2,3), collapse = '-', sep = '=')
paste(letters[1], c(1,2,3), collapse = '-', sep = '=')
paste(letters[1:3], c(1,2,3), collapse = '-')
class(paste(letters[1:3], c(1,2,3), collapse = '-'))
paste(letters[1:3], c(1,2,3), collapse = NULL)
paste(letters[1:3], c(1,2,3), collapse = '-', sep = '=')
paste(letters[1], c(1,2,3), collapse = '-', sep = '=')
x = rep(NA, 10)
x[1:3] = 1
x = rep(NA, 10)
x[1:3] = 1
x
.machine
.Machine
2^-53
library(boot)
as.table
?as.table
?unif
?runif
source('~/My/math/STAT/Courses/AMS 597/597-R/5th_hw.R', echo=TRUE)
cos(0) - cos(pi/3)
n <- 10000
sin.vec <- sin(runif(n, 0, pi/3))
mean(sin.vec)*3/pi
sin.vec <- sin(runif(n, min = 0, max = pi/3))
mean(sin.vec)*3/pi
cos(0) - cos(pi/3)
exp.vec <- exp(-runif(n, min = 0, max = 1/2))
mean(exp.vec)*2
var(exp.vec*2)
# 2.
#True value
1-exp(-0.5)
mean(exp.vec)/2
var(exp.vec/2)
ï¼Ÿrexp
?rexp
#(b)
exp1.vec <- rexp(10000)
exp1.vec <- exp1.vec[exp1.vec<=0.5]
cat('The achieved significance level of permutation test is', sum(abs(cor.vec)>= abs(r0))/B)
x <- rnorm(50)
y <- 0.2*x+rnorm(50)
r0 <- cor(x,y)
xy <- c(x, y)
B <- 1000
cor.vec <-  rep(NA,B)
for (b in 1:B){
x_index <- sample(1:100, 50, replace = F)
cor.vec[b] <- cor(xy[x_index], xy[-x_index])
}
cat('The achieved significance level of permutation test is', sum(abs(cor.vec)>= abs(r0))/B)
cat('The p-value of cor.test is', cor.test(x, y, method = 'spearman', exact = T)$p.value)
?quantile
?step
e^2
exp(2)
install.packages(stats4)
?mle
??mle
library(stats4)
?mle
?optim
######################
# 1.
n <- 10000
sin.vec <- sin(runif(n, min = 0, max = pi/3))
mean(sin.vec)*3/pi
cos(0) - cos(pi/3)
######################
# 1.
n <- 10000
sin.vec <- sin(runif(n, min = 0, max = pi/3))
mean(sin.vec)*pi/3
cos(0) - cos(pi/3)
?cor
# 4.
set.seed(123)
x <- rnorm(50)
y <- 0.2*x+rnorm(50)
r0 <- cor(x,y,method = 'spearman')
xy <- c(x, y)
B <- 1000
cor.vec <-  rep(NA,B)
cat('The p-value of cor.test is', cor.test(x, y, method = 'spearman', exact = T)$p.value)
cat('The achieved significance level of permutation test is', sum(abs(cor.vec)>= abs(r0))/B)
cor.vec <-  rep(NA,B)
for (b in 1:B){
x_index <- sample(1:100, 50, replace = F)
cor.vec[b] <- cor(xy[x_index], xy[-x_index], method = 'spearman')
}
cat('The achieved significance level of permutation test is', sum(abs(cor.vec)>= abs(r0))/B)
### example on page 12
set.seed(123)
n <- 1000
x <- rcauchy(n)
gx <- (x< -2)*dnorm(x)/dcauchy(x)
str(gx)
str(x)
str(x<-2)
omegahat <- mean(gx)
omegahat
#[1] 1.205493e-05
### let's compare this with using simple monte carlo integration
n <- 1000
x <- rnorm(n)
gx <- x < -2
mean(gx)
gx <- dnorm(x)/dcauchy(x)
n <- 1000
x <- rcauchy(n)
gx <- dnorm(x)/dcauchy(x)
mean(gx[x<-2])
length(gx[x<-2])
length(gx)
sum(x<-2)
### example on page 12
set.seed(123)
n <- 1000
x <- rcauchy(n)
sum(x<-2)
x <- rcauchy(n)
length(which(x<-2))
x <- rcauchy(n)
length(which(x<- -2))
length(which(x< -2))
x <- rcauchy(n)
length(which(x< -2))
rm(list = ls())
#1.
#(a)
n <- 1000
x <- runif(n, min = 0, max = 10)
exp.vec <- exp(-2*abs(x-5))
omega.hat <- mean(10*exp.vec)
omega.hat
#(b)
y <- rnorm(n, mean = 5, sd = 1)
gx <- (y>0&y<10)*exp(-2*abs(y-5))/dnorm(y)
omega.star <- mean(gx)
omega.star
#1.
#(a)
set.seed(123)
n <- 1000
x <- runif(n, min = 0, max = 10)
exp.vec <- exp(-2*abs(x-5))
omega.hat <- mean(10*exp.vec)
omega.hat
#(b)
y <- rnorm(n, mean = 5, sd = 1)
gx <- (y>0&y<10)*exp(-2*abs(y-5))/dnorm(y, mean = 5, sd = 1)
omega.star <- mean(gx)
omega.star
var(10*exp.vec)
var(gx)
omega.star
#2.
dat <- read.delim('http://www.ams.sunysb.edu/~pfkuan/Teaching/AMS597/Data/RegData.txt',header=T,sep='\t')
View(dat)
str(dat)
B <-  1000
x <- dat$x
y <- dat$y
xy <- c(x,y)
for (b in 1:B){
x_index <- sample(1:30, 15, replace = F)
cor.vec[b] <- cor(xy[x_index], xy[-x_index], method = 'spearman')
}
cor.vec <- rep(NA, B)
for (b in 1:B){
x_index <- sample(1:30, 15, replace = F)
cor.vec[b] <- cor(xy[x_index], xy[-x_index], method = 'spearman')
}
(sum(cor.vec>0) + 1)/(B+1)
cor.test(x, y, method = 'spearman')
?t.test
#3.
n.vec <- c(10, 20, 30, 40, 50)
set.seed(123)
pw.vec <- rep(NA, 5)
for (j in 1:length(n.vec)){
n <- n.vec[j]
p_value.vec <- rep(NA, B)
for(i in 1:B){
x.vec <- rnorm(n)
y.vec <- rnorm(n, mean = 1, sd = 1)
p_value.vec[i] <- t.test(x.vec, y.vec, var.equal = T)$p.value
}
pw.vec[j] <- mean(p_value.vec<0.1)
}
pw.vec
?power.t.test
pw.vec <-pw.vec.true <-  rep(NA, 5)
for (n in n.vec){
x.vec <- rnorm(n)
y.vec <- rnorm(n, mean = 1, sd = 1)
stat <- t.test(x.vec, y.vec, var.equal = T)$estimate
pw.vec.true <- power.t.test(n, delta = stat, sig.level = 0.1, type = 'two.sample', alternative = 'two.sided')
}
pw.vec.true
View(pw.vec.true)
View(pw.vec.true)
for (j in 1:length(n.vec)){
n <- n.vec[j]
x.vec <- rnorm(n)
y.vec <- rnorm(n, mean = 1, sd = 1)
stat <- t.test(x.vec, y.vec, var.equal = T)$estimate
pw.vec.true[j] <- power.t.test(n, delta = 1, sig.level = 0.1, type = 'two.sample', alternative = 'two.sided')$power
}
pw.vec.true
?plot
plot(pw.vec, n.vec, type = 'l')
for (j in 1:length(n.vec)){
n <- n.vec[j]
p_value.vec <- rep(NA, B)
for(i in 1:B){
x.vec <- rnorm(n)
y.vec <- rnorm(n, mean = 1, sd = 1)
p_value.vec[i] <- t.test(x.vec, y.vec, var.equal = T)$p.value
}
pw.vec[j] <- mean(p_value.vec<0.1)
}
pw.vec
plot(pw.vec, n.vec, type = 'l')
plot(n.vec,pw.vec, type = 'l')
plot(n.vec,pw.vec,xlab = 'sample size', ylab = 'estimated eperical power', type = 'l')
x <- runif(n, min = 0, max = 10)
exp.vec <- exp(-2*abs(x-5))
omega.true <- (1/2 - 1/2*exp(-20))*exp(10)
omega.true
n <- 1000
x <- runif(n, min = 0, max = 10)
exp.vec <- exp(-2*abs(x-5))
var(10*exp.vec)
omega.hat <- mean(10*exp.vec)
omega.hat
1/2 - 1/2*exp(-20)
exp(-20)
?integrate
f <- function(x){
return(exp(-2*abs(x-5)))
}
integrate(f,0,10)
n <- 1000
x <- runif(n, min = 0, max = 10)
exp.vec <- exp(-2*abs(x-5))
var(10*exp.vec)
omega.hat <- mean(10*exp.vec)
omega.hat
#(b)
y <- rnorm(n, mean = 5, sd = 1)
gx <- (y>0&y<10)*exp(-2*abs(y-5))/dnorm(y, mean = 5, sd = 1)
omega.star <- mean(gx)
var(gx)
omega.star
#2.
dat <- read.delim('http://www.ams.sunysb.edu/~pfkuan/Teaching/AMS597/Data/RegData.txt',header=T,sep='\t')
B <-  1000
x <- dat$x
y <- dat$y
xy <- c(x,y)
cor.vec <- rep(NA, B)
for (b in 1:B){
x_index <- sample(1:30, 15, replace = F)
cor.vec[b] <- cor(xy[x_index], xy[-x_index], method = 'spearman')
}
(sum(cor.vec>0) + 1)/(B+1)
cor.test(x, y, method = 'spearman')
stat <- cor.test(x, y, method = 'spearman')
stat <- cor.test(x, y, method = 'spearman')$estimate
xy <- c(x,y)
cor.vec <- rep(NA, B)
for (b in 1:B){
x_index <- sample(1:30, 15, replace = F)
cor.vec[b] <- cor.test(xy[x_index], xy[-x_index], method = 'spearman')$estimate
}
(sum(abs(cor.vec)>abs(stat)) + 1)/(B+1)
cor.test(x, y, method = 'spearman')
stat
stat <- cor.test(x, y, method = 'spearman')$estimate
stat
cor.test(x, y, method = 'spearman')
?cor.test
(sum(abs(cor.vec)>abs(stat)) + 1)/(B+1)
cor.test(x, y, method = 'spearman')
(sum(abs(cor.vec)>abs(stat)) + 1)/(B+1)
cor.test(x, y, method = 'spearman')$p.value
n <- 1000
x <- runif(n, min = 0, max = 10)
exp.vec <- exp(-2*abs(x-5))
var(10*exp.vec)
omega.hat <- mean(10*exp.vec)
omega.hat
#(b)
y <- rnorm(n, mean = 5, sd = 1)
gx <- (y>0&y<10)*exp(-2*abs(y-5))/dnorm(y, mean = 5, sd = 1)
omega.star <- mean(gx)
var(gx)
omega.star
